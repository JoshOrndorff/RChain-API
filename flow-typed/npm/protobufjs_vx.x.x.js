// flow-typed signature: 3d00afa28bd12dfcc1f4b43b1be17d2d
// flow-typed version: <<STUB>>/protobufjs_v6.8.8/flow_v0.97.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'protobufjs'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

declare module 'protobufjs' {
/*@@ISSUE Long*/
declare type Long = mixed;
declare type util$Long = mixed;

/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.8.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

/**
 * Wire format writer using `Uint8Array` if available, otherwise `Array`.
 */
declare export class Writer {
  /**
   * Constructs a new writer instance.
   */
  constructor(): this;

  /**
   * Current length.
   */
  len: number;

  /**
   * Operations head.
   */
  head: { [key: string]: any };

  /**
   * Operations tail
   */
  tail: { [key: string]: any };

  /**
   * Linked forked states.
   */
  states: { [key: string]: any } | null;

  /**
   * Creates a new writer.
   * @returns A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
   */
  static create(): BufferWriter | Writer;

  /**
   * Allocates a buffer of the specified size.
   * @param size Buffer size
   * @returns Buffer
   */
  static alloc(size: number): Uint8Array;

  /**
   * Writes an unsigned 32 bit value as a varint.
   * @param value Value to write
   * @returns `this`
   */
  uint32(value: number): Writer;

  /**
   * Writes a signed 32 bit value as a varint.
   * @param value Value to write
   * @returns `this`
   */
  int32(value: number): Writer;

  /**
   * Writes a 32 bit value as a varint, zig-zag encoded.
   * @param value Value to write
   * @returns `this`
   */
  sint32(value: number): Writer;

  /**
   * Writes an unsigned 64 bit value as a varint.
   * @param value Value to write
   * @returns `this`
   * @throws {TypeError} If `value` is a string and no long library is present.
   */
  uint64(value: Long | number | string): Writer;

  /**
   * Writes a signed 64 bit value as a varint.
   * @param value Value to write
   * @returns `this`
   * @throws {TypeError} If `value` is a string and no long library is present.
   */
  int64(value: Long | number | string): Writer;

  /**
   * Writes a signed 64 bit value as a varint, zig-zag encoded.
   * @param value Value to write
   * @returns `this`
   * @throws {TypeError} If `value` is a string and no long library is present.
   */
  sint64(value: util$Long | number | string): Writer;

  /**
   * Writes a boolish value as a varint.
   * @param value Value to write
   * @returns `this`
   */
  bool(value: boolean): Writer;

  /**
   * Writes an unsigned 32 bit value as fixed 32 bits.
   * @param value Value to write
   * @returns `this`
   */
  fixed32(value: number): Writer;

  /**
   * Writes a signed 32 bit value as fixed 32 bits.
   * @param value Value to write
   * @returns `this`
   */
  sfixed32(value: number): Writer;

  /**
   * Writes an unsigned 64 bit value as fixed 64 bits.
   * @param value Value to write
   * @returns `this`
   * @throws {TypeError} If `value` is a string and no long library is present.
   */
  fixed64(value: util$Long | number | string): Writer;

  /**
   * Writes a signed 64 bit value as fixed 64 bits.
   * @param value Value to write
   * @returns `this`
   * @throws {TypeError} If `value` is a string and no long library is present.
   */
  sfixed64(value: util$Long | number | string): Writer;

  /**
   * Writes a float (32 bit).
   * @param value Value to write
   * @returns `this`
   */
  float(value: number): Writer;

  /**
   * Writes a double (64 bit float).
   * @param value Value to write
   * @returns `this`
   */
  double(value: number): Writer;

  /**
   * Writes a sequence of bytes.
   * @param value Buffer or base64 encoded string to write
   * @returns `this`
   */
  bytes(value: Uint8Array | string): Writer;

  /**
   * Writes a string.
   * @param value Value to write
   * @returns `this`
   */
  string(value: string): Writer;

  /**
   * Forks this writer's state by pushing it to a stack.
   * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
   * @returns `this`
   */
  fork(): Writer;

  /**
   * Resets this instance to the last state.
   * @returns `this`
   */
  reset(): Writer;

  /**
   * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
   * @returns `this`
   */
  ldelim(): Writer;

  /**
   * Finishes the write operation.
   * @returns Finished buffer
   */
  finish(): Uint8Array;
}
/**
 * Wire format writer using node buffers.
 */
declare export class BufferWriter extends Writer {
  /**
   * Constructs a new buffer writer instance.
   */
  constructor(): this;

  /**
   * Finishes the write operation.
   * @returns Finished buffer
   */
  finish(): Buffer; /*@@ISSUE: util$Buffer */

  /**
   * Allocates a buffer of the specified size.
   * @param size Buffer size
   * @returns Buffer
   */
  static alloc(size: number): Buffer;
}
/**
 * Wire format reader using `Uint8Array` if available, otherwise `Array`.
 */
declare export class Reader {
  /**
   * Constructs a new reader instance using the specified buffer.
   * @param buffer Buffer to read from
   */
  constructor(buffer: Uint8Array): this;

  /**
   * Read buffer.
   */
  buf: Uint8Array;

  /**
   * Read buffer position.
   */
  pos: number;

  /**
   * Read buffer length.
   */
  len: number;

  /**
   * Creates a new reader using the specified buffer.
   * @param buffer Buffer to read from
   * @returns A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
   * @throws {Error} If `buffer` is not a valid buffer
   */
  static create(buffer: Uint8Array | Buffer): Reader | BufferReader;

  /**
   * Reads a varint as an unsigned 32 bit value.
   * @returns Value read
   */
  uint32(): number;

  /**
   * Reads a varint as a signed 32 bit value.
   * @returns Value read
   */
  int32(): number;

  /**
   * Reads a zig-zag encoded varint as a signed 32 bit value.
   * @returns Value read
   */
  sint32(): number;

  /**
   * Reads a varint as a signed 64 bit value.
   * @returns Value read
   */
  int64(): Long;

  /**
   * Reads a varint as an unsigned 64 bit value.
   * @returns Value read
   */
  uint64(): mixed;

  /**
   * Reads a zig-zag encoded varint as a signed 64 bit value.
   * @returns Value read
   */
  sint64(): mixed;

  /**
   * Reads a varint as a boolean.
   * @returns Value read
   */
  bool(): boolean;

  /**
   * Reads fixed 32 bits as an unsigned 32 bit integer.
   * @returns Value read
   */
  fixed32(): number;

  /**
   * Reads fixed 32 bits as a signed 32 bit integer.
   * @returns Value read
   */
  sfixed32(): number;

  /**
   * Reads fixed 64 bits.
   * @returns Value read
   */
  fixed64(): mixed;

  /**
   * Reads zig-zag encoded fixed 64 bits.
   * @returns Value read
   */
  sfixed64(): mixed;

  /**
   * Reads a float (32 bit) as a number.
   * @returns Value read
   */
  float(): number;

  /**
   * Reads a double (64 bit float) as a number.
   * @returns Value read
   */
  double(): number;

  /**
   * Reads a sequence of bytes preceeded by its length as a varint.
   * @returns Value read
   */
  bytes(): Uint8Array;

  /**
   * Reads a string preceeded by its byte length as a varint.
   * @returns Value read
   */
  string(): string;

  /**
   * Skips the specified number of bytes if specified, otherwise skips a varint.
   * @param length Length if known, otherwise a varint is assumed
   * @returns `this`
   */
  skip(length?: number): Reader;

  /**
   * Skips the next element of the specified wire type.
   * @param wireType Wire type received
   * @returns `this`
   */
  skipType(wireType: number): Reader;
}
/**
 * Wire format reader using node buffers.
 */
declare export class BufferReader extends Reader {
  /**
   * Constructs a new buffer reader instance.
   * @param buffer Buffer to read from
   */
  constructor(buffer: Buffer): this;

  /**
   * Reads a sequence of bytes preceeded by its length as a varint.
   * @returns Value read
   */
  bytes(): Buffer;
}

}
