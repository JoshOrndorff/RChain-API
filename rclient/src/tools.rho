/**
 * tools - stuff n junk
 */
new
  Tools,
  WalletCheckCh, RevVaultCh, sysCh, bwCh,
//  export,          // ISSUE: rholang extension
  export(`export:`), // ISSUE: rholang extension
  trace(`rho:io:stderr`),
  lookup(`rho:registry:lookup`),
  insertArbitrary(`rho:registry:insertArbitrary`),
  insertSigned(`rho:registry:insertSigned:ed25519`)
in {
  export!(*Tools) | trace!("Tools OK") |

  lookup!(`rho:id:1o93uitkrjfubh43jt19owanuezhntag5wh74c6ur5feuotpi73q8z`, *RevVaultCh) |
  // https://github.com/rchain/rchain/blob/dev/casper/src/main/rholang/WalletCheck.rho
  lookup!(`rho:id:oqez475nmxx9ktciscbhps18wnmnwtm6egziohc3rkdzekkmsrpuyt`, *WalletCheckCh) |
  // SystemInstancesRegistry.rho.
  lookup!(`rho:id:wdwc36f4ixa6xacck3ddepmgueum7zueuczgthcqp6771kdu8jogm8`, *sysCh) |
  // BasicWallet.rho
  lookup!(`rho:id:3yicxut5xtx5tnmnneta7actof4yse3xangw4awzt8c8owqmddgyms`, *bwCh) |

  for(
    @(_, *RevVault) <- RevVaultCh
  ) {

    contract Tools(@"genVault",
      @{revAddress /\ String},
      @{amount /\ Int},
      return
    ) = {
      new vaultCh in {
        RevVault!("findOrCreateGenesisVault", revAddress, amount, *vaultCh) |
        for(@(true, vault) <- vaultCh) {
          trace!({"new vault": vault, "amount": amount}) |
          return!((true, vault))
        }
      }
    } |

    contract Tools(@"balance",
      @{revAddress /\ String},
      return
    ) = {
      new vaultCh, balanceCh in {
        RevVault!("findOrCreate", revAddress, *vaultCh) | for (@(true, vault) <- vaultCh) {
          trace!("Obtained vault, checking balance") |

          @vault!("balance", *balanceCh) | for (@balance <- balanceCh) {
            trace!({"balance": balance}) |
            return!(balance)
          }
        }
      }
    } |

    contract Tools(@"transfer",
      @{from /\ String},  // RevAddress
      @{to /\ String},    // RevAddress
      @{amount /\ Int},
      return
    ) = {
      new vaultCh, revVaultkeyCh in {
        RevVault!("findOrCreate", from, *vaultCh) |
        RevVault!("deployerAuthKey", *revVaultkeyCh) |
        for (@(true, vault) <- vaultCh; key <- revVaultkeyCh) {

          trace!({"amount": amount, "from": from, "to": to, "vault": vault, "key": *key}) |

          new resultCh in {
            @vault!("transfer", to, amount, *key, *resultCh) |
            for (@result <- resultCh) {
              trace!({"amount": amount, "to": to, "result": result}) |
              return!(result)
            }
          }
        }
      }
    }
  } |

  for(
    @(_, *WalletCheck) <- WalletCheckCh;
    @(_, *SystemInstancesRegistry) <- sysCh;
    @(_, *BasicWallet) <- bwCh
  ) {
    contract Tools(@"claim",
      @{ethAddr /\ String},  // 0x...
      @{pubKey /\ String},   // secp256k1 public key in hex
      @{sigHex /\ String},   // DER encoded secp256k1 sig in hex
      statusOut,             // signed channel
      return
    ) = {
      WalletCheck!("claim", ethAddr, pubKey, sigHex, *statusOut) | for (@(ok, msg) <- statusOut) {
        if(ok) { return!({"=": pubKey}) }
        else { return!({"!": msg}) }
      }
    } |

    contract Tools(@"getBalance", @{uri /\ Uri}, return) = {
      trace!({"getBalance": *return, "trace": *trace}) |
      new wCh, bCh in {
        lookup!(uri, *wCh) | for(@found <- wCh) {
          match (found) {
            Nil => {return!({"!": "nothing registered at that URI"}) }
            (_, *wallet) => {
              wallet!("getBalance", *bCh) | for(@balance <- bCh) {
                return!({"=": balance})
              }
            }
          }
        }
      }
    } |

    contract Tools(@"prepareToPublish",
      @{pubKey /\ String},  // ed25519 public key
      @{nonce /\ Int},
      return
    ) = {
      new rCh, wCh in {
        WalletCheck!("access", pubKey, *wCh) | for(@(ok, *maybeWallet) <- wCh) {
          trace!({"access": *maybeWallet}) |
          if(ok == false) { trace!({"problem": *maybeWallet}) | return!({"!": *maybeWallet}) }
          else { return!({"=": (nonce, *maybeWallet).toByteArray()}) }
        }
      }
    } |

    contract Tools(@"publishClaimed",
      @{secPubKey /\ String},   // eth style secp256k1 public key for WalletCheck access
      @{edPubKey /\ ByteArray}, // ed25519 public key for InsertSigned. Go figure.
      @{sig /\ ByteArray},      // ed25519 sig over (nonce, *wallet)
      @{nonce /\ Int},
      return
    ) = {
      new rCh, wCh in {
        WalletCheck!("access", secPubKey, *wCh) | for(@(ok, *maybeWallet) <- wCh) {
          trace!({"access": *maybeWallet}) |
          if(ok == false) { trace!({"problem": *maybeWallet}) | return!({"!": *maybeWallet}) }
          else {
            insertSigned!(edPubKey, (nonce, *maybeWallet), sig, *rCh) |
            for (@uri <- rCh) {
              if(uri == Nil) { return!({"!": "insertSigned failed; bad signature?"}) }
              else { return!({"=": uri}) }
            }
          }
        }
      }
    } |

    contract Tools(@"createWallet",
      @{algorithm /\ String},   // ed25519 or secp256k1
      @{pk /\ String},          // wallet pk using algorithm above
      @{nonce /\ Int},          //
      return
    ) = {
      new revCh, purseCh, wCh in {
        SystemInstancesRegistry!("lookup", "rev", *revCh) | for(rev <- revCh) {
          trace!({"rev": *rev}) |
          rev!("makePurse", *revCh) | for (@emptyPurse <- revCh) {
            trace!({"empty purse": emptyPurse}) |
            BasicWallet!(emptyPurse, algorithm, pk, *wCh) | for(@maybeWallet <- wCh) {
              trace!({"maybeWallet": maybeWallet}) |
              match (maybeWallet) {
                [] => { return!({"!": "no such algorithm: " ++ algorithm}) }
                [wallet] => {
                  new uriCh in {
                    insertArbitrary!(wallet, *uriCh) | for(@uri <- uriCh) {
                      trace!({"insert URI": uri}) |
                      if (uri == Nil) { return!({"!": "failed to register wallet"}) }
                      else {
                        return!({"=": { "uri": uri, "toSign": (nonce, wallet).toByteArray()
                        }})
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    } |

    contract Tools(@"publishRegistered",
      @{uri /\ Uri},            // where to find Wallet (from insertArbitrary)
      @{edPubKey /\ ByteArray}, // ed25519 public key for InsertSigned.
      @{sig /\ ByteArray},      // ed25519 sig over (nonce, *wallet)
      @{nonce /\ Int},
      return
    ) = {
      new wCh, rCh in {
        lookup!(uri, *wCh) | for (@wallet <- wCh) {
          if (wallet == Nil) { return!({"!": "lookup failed"}) }
          else {
            insertSigned!(edPubKey, (nonce, wallet), sig, *rCh) |
            for (@uri <- rCh) {
              if(uri == Nil) { return!({"!": "insertSigned failed; bad signature?"}) }
              else { return!({"=": uri}) }
            }
          }
        }
      }
    }
  } |

  contract Tools(@"pay",
    @{fromAddr /\ Uri}, // registry address of BasicWallet
    @{toAddr /\ Uri},   // "
    @{amount /\ Int},
    @{nonce /\ Int},    // getNonce() of from Wallet
    @{sig /\ String},   // over blake2b256Hash([nonce, amount, *via].toBytearray())
    via,                // signed channel
    return              // { "=": b } where b is balance of from after payment or
                        // { "!": "problem description" }
  ) = {
    new fromCh, toCh, statusCh, dCh, bCh in {
      trace!({"send": amount}) |
      lookup!(fromAddr, *fromCh) |
      lookup!(toAddr, *toCh) |
      for(@(_, *fromWallet) <- fromCh; @(_, *toWallet) <- toCh) {
        trace!({"fromWallet": *fromWallet, "toWallet": *toWallet}) |
        match (*fromWallet, *toWallet) {
          // ! from Waterken JSON conventions
          (Nil, _) => { return!({ "!": "from: nothing registered", "uri": fromAddr}) }
          (_, Nil) => { return!({ "!": "to: nothing registered", "uri": toAddr}) }
          _ => {
            fromWallet!("transfer", amount, nonce, sig, *via, *statusCh) |
            for (@status <- statusCh) {
              trace!({"transfer status": status}) |
              if (status == "Success") {
                for(pmt <- via) {
                  trace!({"pmt": *pmt, "payee wallet": *toWallet}) |
                  toWallet!("deposit", amount, *pmt, *dCh) |
                  for (@depositResult <- dCh) {
                    trace!({"deposit result": depositResult}) |
                    if (depositResult) {
                      fromWallet!("getBalance", *bCh) | for (@balance <- bCh) {
                        return!({ "=": balance })
                      }
                    } else {
                      return!({ "!": "deposit failed; overdraft?" })
                    }
                  }
                }
              } else {
                return!({ "!": status })
              }
            }
          }
        }
      }
    }
  }
}
