/**
 * tools - stuff n junk
 */
new
  Tools,
  RevVaultCh,
  export,          // ISSUE: rholang extension
//  export(`export:`), // ISSUE: rholang extension
  trace(`rho:io:stderr`),
  lookup(`rho:registry:lookup`),
  insertArbitrary(`rho:registry:insertArbitrary`),
  insertSigned(`rho:registry:insertSigned:ed25519`)
in {
  export!(*Tools) | trace!("Tools OK") |

  lookup!(`rho:id:1o93uitkrjfubh43jt19owanuezhntag5wh74c6ur5feuotpi73q8z`, *RevVaultCh) |

  for(
    @(_, *RevVault) <- RevVaultCh
  ) {

    contract Tools(@"genVault",
      @{revAddress /\ String},
      @{amount /\ Int},
      return
    ) = {
      new vaultCh, balanceCh in {
        RevVault!("findOrCreateGenesisVault", revAddress, amount, *vaultCh) |
        for(@(true, vault) <- vaultCh) {
          trace!({"new vault": vault, "amount": amount}) |

          @vault!("balance", *balanceCh) | for (@balance <- balanceCh) {
            trace!({"new vault balance": balance}) |
            return!((true, amount, balance))
          }
        }
      }
    } |

    contract Tools(@"balance",
      @{revAddress /\ String},
      return
    ) = {
      new vaultCh, balanceCh in {
        RevVault!("findOrCreate", revAddress, *vaultCh) | for (@(true, vault) <- vaultCh) {
          trace!("Obtained vault, checking balance") |

          @vault!("balance", *balanceCh) | for (@balance <- balanceCh) {
            trace!({"balance": balance}) |
            return!(balance)
          }
        }
      }
    } |

    contract Tools(@"transfer",
      @{from /\ String},  // RevAddress
      @{to /\ String},    // RevAddress
      @{amount /\ Int},
      return
    ) = {
      new vaultCh, revVaultkeyCh in {
        RevVault!("findOrCreate", from, *vaultCh) |
        RevVault!("deployerAuthKey", *revVaultkeyCh) |
        for (@(true, vault) <- vaultCh; key <- revVaultkeyCh) {

          trace!({"amount": amount, "from": from, "to": to, "vault": vault, "key": *key}) |

          new resultCh in {
            @vault!("transfer", to, amount, *key, *resultCh) |
            for (@result <- resultCh) {
              trace!({"amount": amount, "to": to, "result": result}) |
              return!(result)
            }
          }
        }
      }
    }
  }
}
